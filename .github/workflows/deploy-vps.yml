# Usage:
# - If the build is successful, it packages the application into a Docker container.
# - The container is pushed to GHCR and deployed to the vps.

# Requirements:
# - These secrets must be set up in the repository settings:
#   - SSH_PRIVATE_KEY: Private SSH key for accessing the vps
# - These variables must be set up in the repository settings:
#   - SSH_USER: The SSH username for the vps
#   - SSH_HOST: The SSH host (IP or domain) of the vps
#   - ENV_FILE_{environmentType} The .env file used by the app (recommended to be in the environment vars)

name: Publish to VPS

on:
  workflow_dispatch:
    inputs:
      innerPort:
        description: 'Inner port:'
        required: true
        default: 3000
        type: number
      outerPort:
        description: 'Outer port:'
        required: true
        default: 80
        type: number
      useOldImage:
        description: 'Use old Docker image:'
        required: true
        default: false
        type: boolean
      environmentType:
        description: 'Environment type (for image/container name):'
        required: true
        default: 'PRODUCTION'
        type: string
      githubEnvironment:
        description: "The environment the secrets will be pulled from:"
        type: environment
        required: true
  push:
    branches:
      - 'main'
    paths-ignore:
      - '**.md'
      - '.github/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/nerd-web-${{ github.event.inputs.environmentType || 'PRODUCTION' }}-${{ github.ref_name }}:latest
  CONTAINER_NAME: nerd-web-${{ github.event.inputs.environmentType || 'PRODUCTION' }}-${{ github.ref_name }}
  INNER_PORT: ${{ github.event.inputs.innerPort || '3000' }}
  OUTER_PORT: ${{ github.event.inputs.outerPort || '80' }}
  USE_OLD_IMAGE: ${{ github.event.inputs.useOldImage || 'false' }}

jobs:
  publish:
    name: Publish image
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.githubEnvironment || 'MainBranch'}}

    steps:
      - name: Checkout code
        if: ${{ env.USE_OLD_IMAGE == 'false' }}
        uses: actions/checkout@v4.2.2

      - name: Login to GHCR
        if: ${{ env.USE_OLD_IMAGE == 'false' }}
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin

      - name: Create .env file
        if: ${{ env.USE_OLD_IMAGE == 'false' }}
        run: |
          echo "${{ vars.ENV_FILE }}" > .env

      - name: Build and push Docker image
        if: ${{ env.USE_OLD_IMAGE == 'false' }}
        run: |
          docker build . --tag ${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]') \
            --build-arg ENV_FILE=.env
          docker push ${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')

  deploy:
    needs: publish
    name: Deploy image
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.githubEnvironment || 'MainBranch'}}

    steps:
      - name: Install SSH keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ vars.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Deploy
        run: |
          ssh ${{ vars.SSH_USER }}@${{ vars.SSH_HOST }} << 'EOF'
          echo "${{ secrets.GITHUB_TOKEN }}" | sudo docker login ${{ env.REGISTRY }} -u ${{ github.actor }} --password-stdin
          sudo docker pull ${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          sudo docker stop $(echo "${{ env.CONTAINER_NAME }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-') || true
          sudo docker rm $(echo "${{ env.CONTAINER_NAME }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-') || true
          sudo docker rmi $(sudo docker images $(echo "${{ env.REGISTRY }}/${{ github.actor }}/${{ env.CONTAINER_NAME }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-') -q) -f || true
          sudo docker run -d \
            --name $(echo "${{ env.CONTAINER_NAME }}" | tr '[:upper:]' '[:lower:]' | tr '/' '-') \
            -p ${{ env.OUTER_PORT }}:${{ env.INNER_PORT }} \
            ${{ env.REGISTRY }}/$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
          EOF

      - name: Cleanup SSH keys
        run: rm -rf ~/.ssh